{"version":3,"file":"ngx-gravatar.js","sources":["ng://ngx-gravatar/lib/gravatar-config.token.ts","ng://ngx-gravatar/lib/ngx-gravatar.enums.ts","ng://ngx-gravatar/lib/ngx-gravatar.constants.ts","ng://ngx-gravatar/lib/ngx-gravatar.service.ts","ng://ngx-gravatar/lib/ngx-gravatar.directive.ts","ng://ngx-gravatar/lib/gravatar.module.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\nimport { GravatarConfig } from './gravatar-config';\n\n/**\n * Injection token for gravatar configuration\n */\nexport const GRAVATAR_CONFIG_TOKEN = new InjectionToken<GravatarConfig>('gravatarCustom.config');\n","// Visit https://en.gravatar.com/site/implement/images for more information\nexport enum FALLBACK {\n  blank = 'blank',\n  identicon = 'identicon',\n  mm = 'mm', // changed to 'mp', visit Gravatar official site for more details\n  mp = 'mp',\n  monsterid = 'monsterid',\n  retro = 'retro',\n  robohash = 'robohash',\n  wavatar = 'wavatar'\n}\n\nexport enum RATING {\n  g = 'g',\n  pg = 'pg',\n  r = 'r',\n  x = 'x'\n}\n\nexport type FallbackType = keyof typeof FALLBACK;\n\nexport type RatingType = keyof typeof RATING;\n","import { GravatarConfig } from './gravatar-config';\nimport { FALLBACK, RATING } from './ngx-gravatar.enums';\n\nexport const DEFAULT_CONFIG: GravatarConfig = {\n  fallback: FALLBACK.retro,\n  size: 40,\n  cornerRadius: 0,\n  preferGravatar: false,\n  hasBorder: false,\n  borderColor: '#000000',\n  borderRadius: '50%',\n  borderStyle: 'solid',\n  borderWidth: 1,\n  round: true,\n  backgroundColor: 'transparent',\n  rating: RATING.g,\n  ratio: 2\n};\n","import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';\nimport { Md5 } from 'ts-md5/dist/md5';\nimport { GravatarConfig } from './gravatar-config';\nimport { GRAVATAR_CONFIG_TOKEN } from './gravatar-config.token';\nimport { DEFAULT_CONFIG } from './ngx-gravatar.constants';\nimport { FALLBACK, FallbackType, RATING, RatingType } from './ngx-gravatar.enums';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxGravatarService {\n  private defaultConfig: GravatarConfig;\n\n  constructor(@Optional() @Inject(GRAVATAR_CONFIG_TOKEN) private gravatarConfig: GravatarConfig) {\n    this.defaultConfig = { ...DEFAULT_CONFIG };\n\n    if (this.gravatarConfig) {\n      this.gravatarConfig.rating = this.determineRating(this.gravatarConfig.rating) as RatingType;\n      this.gravatarConfig.fallback = this.determineFallback(this.gravatarConfig.fallback) as FallbackType;\n      this.defaultConfig = { ...this.defaultConfig, ...this.gravatarConfig };\n    }\n  }\n\n  /**\n   * Return defaultConfig object\n   */\n  getDefaultConfig() {\n    return this.defaultConfig;\n  }\n\n  /**\n   * Generate gravatar url\n   * @param email is a string. If email is not a string, email will be set to empty string \"\" by default\n   * @param md5Hash is a string. If value is given it will take precedence over email.\n   * @param size number\n   * @param rating string\n   * @param fallback string\n   * @return gravatar url\n   */\n  generateGravatarUrl(email: string, md5Hash?: string, size?: number, rating?: string, fallback?: string) {\n    let emailHash: string | Int32Array;\n    if (md5Hash) {\n      emailHash = md5Hash;\n    } else {\n      try {\n        email = email.trim().toLowerCase();\n      } catch (e) {\n        console.error(`[ngx-gravatar] - Email (${email}) is not a string. Empty string is used as a default email.`);\n        email = '';\n      }\n      emailHash = Md5.hashStr(email);\n    }\n    size = size ? size : this.defaultConfig.size;\n    rating = this.determineRating(rating, this.defaultConfig.rating);\n    fallback = this.determineFallback(fallback, this.defaultConfig.fallback);\n    return `https://www.gravatar.com/avatar/${emailHash}?s=${size}&r=${rating}&d=${fallback}`;\n  }\n\n  /**\n   * Determine gravatar fallback string\n   * @param fallback string\n   * @param defaultFallback string\n   * @return string\n   */\n  private determineFallback(fallback: string, defaultFallback: string = DEFAULT_CONFIG.fallback): string {\n    if (fallback === undefined) {\n      return defaultFallback;\n    }\n\n    if (FALLBACK[fallback] === undefined) {\n      // Complain invalid fallback\n      console.error(\n        `[ngx-gravatar] - \"${fallback}\" is invalid gravatar fallback type. ` + `Default fallback \"${defaultFallback}\" is used.`\n      );\n      return defaultFallback;\n    }\n\n    return fallback;\n  }\n\n  /**\n   * Determine gravatar rating string\n   * @param rating string\n   * @param defaultRating string\n   * @return string\n   */\n  private determineRating(rating: string, defaultRating: string = DEFAULT_CONFIG.rating): string {\n    if (rating === undefined) {\n      return defaultRating;\n    }\n\n    if (RATING[rating] === undefined) {\n      console.error(`[ngx-gravatar] - \"${rating}\" is invalid gravatar rating type. ` + `Default rating \"${defaultRating}\" is used.`);\n      return defaultRating;\n    }\n\n    return rating;\n  }\n}\n","import { Directive, ElementRef, Input, OnChanges, OnInit, Renderer2 } from '@angular/core';\nimport { NgxGravatarService } from './ngx-gravatar.service';\nimport { GravatarConfig } from './gravatar-config';\n\n@Directive({\n  selector: '[ngx-gravatar], [ngxGravatar]'\n})\nexport class NgxGravatarDirective implements OnChanges, OnInit {\n  @Input() src: string;\n  @Input() email: string;\n  @Input() md5Hash: string;\n  @Input() size: number;\n  @Input() fallback: string; // enum: ['blank', 'identicon', 'mm', 'monsterid', 'retro', 'robohash', 'wavatar']\n  @Input() rating: string; // enum: ['g', 'pg', 'r', 'x']\n  @Input() round: boolean;\n  @Input() cornerRadius: number;\n  @Input() borderColor: string;\n  @Input() borderWidth: number;\n  @Input() style: any = {};\n  @Input() preferGravatar: boolean;\n  @Input() backgroundColor: boolean;\n  @Input() ratio: number;\n\n  initialized: boolean;\n  defaultConfig: GravatarConfig;\n  requestedSize: number;\n  isGravatarUsed: boolean;\n\n  constructor(private elementRef: ElementRef, private renderer: Renderer2, private gravatarService: NgxGravatarService) {\n    this.initialized = false;\n    this.defaultConfig = this.gravatarService.getDefaultConfig();\n    // Listen for error when fetching custom src\n    this.renderer.listen(this.elementRef.nativeElement, 'error', event => {\n      if (!this.isGravatarUsed) {\n        this.initializeAvatar(true); // Force using gravatar\n      }\n    });\n  }\n\n  ngOnInit() {\n    this.initializeAvatar();\n    this.initialized = true;\n    this.isGravatarUsed = false;\n  }\n\n  ngOnChanges() {\n    if (this.initialized) {\n      this.initializeAvatar();\n    }\n  }\n\n  /**\n   * Set default values for user inputs if they are not provided\n   */\n  private setDefaultValues(): void {\n    this.size = this.computeSize();\n    this.ratio = this.ratio === undefined ? this.defaultConfig.ratio : this.ratio;\n    this.requestedSize = this.size * this.ratio;\n    this.round = this.round === undefined ? this.defaultConfig.round : this.round;\n    this.cornerRadius = this.cornerRadius === undefined ? this.defaultConfig.cornerRadius : this.cornerRadius;\n    this.preferGravatar = this.preferGravatar === undefined ? this.defaultConfig.preferGravatar : this.preferGravatar;\n  }\n\n  /**\n   * Initialize avatar.\n   * Custom source has higher priority if preferGravatar is not set on.\n   * Finally, set styles for the avatar.\n   */\n  private initializeAvatar(forcedGravatar?: boolean): void {\n    this.setDefaultValues();\n    let url = '';\n    if (this.preferGravatar || forcedGravatar) {\n      url = this.gravatarService.generateGravatarUrl(this.email, this.md5Hash, this.requestedSize, this.rating, this.fallback);\n      this.isGravatarUsed = true;\n    } else {\n      // this.preferGravatar == false\n      if (this.src) {\n        url = this.src;\n      } else {\n        // fallback to gravatar\n        url = this.gravatarService.generateGravatarUrl(this.email, this.md5Hash, this.requestedSize, this.rating, this.fallback);\n        this.isGravatarUsed = true;\n      }\n    }\n    this.renderer.setProperty(this.elementRef.nativeElement, 'src', url);\n    this.setStyle(this.avatarStyle());\n  }\n\n  /**\n   * Compute the size of the avatar\n   * @return size\n   */\n  private computeSize(): number {\n    let size = this.size === undefined ? this.defaultConfig.size : this.size;\n    if (this.style && this.style.width) {\n      try {\n        const width = this.style.width.trim();\n        if (width.match(/^\\d+px$/)) {\n          // width with px unit\n          size = width.replace('px', '');\n        }\n      } catch (e) {\n        return size;\n      }\n    }\n    return size;\n  }\n\n  /**\n   * Compute style object\n   * @return style object\n   */\n  private avatarStyle() {\n    const style = {\n      width: this.size + 'px',\n      height: this.size + 'px',\n      borderRadius: this.round ? this.defaultConfig.borderRadius : this.cornerRadius + 'px',\n      borderStyle: this.defaultConfig.hasBorder || this.borderColor || this.borderWidth ? this.defaultConfig.borderStyle : 'none',\n      borderColor: this.borderColor ? this.borderColor : this.defaultConfig.borderColor,\n      borderWidth: this.borderWidth ? this.borderWidth + 'px' : this.defaultConfig.borderWidth + 'px',\n      backgroundColor: this.backgroundColor ? this.backgroundColor : this.defaultConfig.backgroundColor\n    };\n    return { ...style, ...this.style };\n  }\n\n  /**\n   * Set style for the avatar\n   * @param styles style object\n   */\n  private setStyle(styles: any) {\n    Object.keys(styles).forEach(key => {\n      this.renderer.setStyle(this.elementRef.nativeElement, key, styles[key]);\n    });\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { GravatarConfig } from './gravatar-config';\nimport { GRAVATAR_CONFIG_TOKEN } from './gravatar-config.token';\nimport { NgxGravatarDirective } from './ngx-gravatar.directive';\n\n@NgModule({\n  declarations: [NgxGravatarDirective],\n  exports: [NgxGravatarDirective]\n})\nexport class GravatarModule {\n  static forRoot(gravatarConfig: GravatarConfig): ModuleWithProviders {\n    return {\n      ngModule: GravatarModule,\n      providers: [\n        {\n          provide: GRAVATAR_CONFIG_TOKEN,\n          useValue: gravatarConfig\n        }\n      ]\n    };\n  }\n}\n"],"names":[],"mappings":"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"}